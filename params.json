{
  "name": "machinamentum's word stuff",
  "tagline": "",
  "body": "## Proposition for a better OS\r\n### Introduction\r\nOver the past few years I've been increasingly losing interest in interacting with major operating systems for my day-to-day needs. Major operating systems have become largely bloatware that is more intrusive to the user's experience than it is useful. I will try to outline the surface features at this time. Features that are non-user facing (within the kernel, programming interface, etc..) will be outlined at a later time.\r\n\r\nThese are the basic philosophies for designing this new OS:\r\n 1. Operating systems should be designed to help the user get from point A to point B or perform task XYZ with as little friction as possible.\r\n 2. A design choice should not compromise philosophy(1), or philosophy(2).\r\n 3. The OS should be stripped of all bloatware.\r\n 4. The OS should be as unintrusive to the user as possible.\r\n 5. Upgrading the OS should improve the user's experience, not degrade it.\r\n 6. The OS should be as easy and as accessible as possible; it should support multiple points of interaction by default. Whether the user wants to use a keyboard and mouse, a touch screen, or even a gamepad, the OS should be agnostic to these common points of interaction and should provide a pleasant experience.\r\n\r\n### The Terminal\r\nCurrently, command terminals support basic IO, command execution, and simple text rendering (coloring, italics, bold face, etc..). These aren't bad features at all, this small feature set is what makes interacting with consoles still a pretty good experience. However, this limiting feature set induces poor implementation choices of software that uses the console as a primary user interface. A prime example of a such program is the GNU debugger. GDB is an otherwise good debugger, but it's console-based user interface makes even the most trivial of debugging tasks impossible to efficiently get done. We could do better.\r\n\r\n**Bitmap rendering**\r\nI first heard about this idea from Gary Bernhardt of Destroy All Software in his talk [A Whole New World](https://www.destroyallsoftware.com/talks/a-whole-new-world). Although Gary mentions a few interesting uses for terminal raster graphics, there's much wider implications of what this feature would be capable of. This enables full-featured UI's from within a terminal. A terminal app could render a webpage, draw game graphics, or display a powerpoint. Typically, a terminal app like (for example) [gource](http://gource.io/) would have to open a separate window to draw its output. The user then has to exit the newly opened window the click back into the terminal. This is unneeded friction that does nothing but waste the user's time.\r\n\r\n**Mouse/agnostic pointer input**\r\nSince we have to support philosophy(6). The terminal should be able to do more with a pointer device than just copy-paste. As a natural, harmonious progression with bitmap rendering, a terminal app should be able to capture basic pointer input like position and clicking/tapping.\r\n\r\n**Scripting language**\r\nThe terminal should support a robust scripting language to allow the user to automate tasks or interact with the system. Although this is a current feature of most terminals, many terminal languages are designed to do most of their work in the form of executing other terminal programs. Scripts in this language should be native to the system; they should be able to work like any other program without having to invoke other terminal programs to perform a task.\r\n\r\n### Windowing system\r\nAlthough the features proposed in *The Terminal* would make windowing obsolete, there's still a major use for apps exclusively designed around a window system. The terminal is typically thought of as a power-user-y interface; it inherently requires a keyboard and a bit of learning to effectively use it. A windowing system still provides a smaller amount of friction than the terminal.\r\n\r\niOS and Window's MetroUI are forward-thinking systems. They maximize simplicity while minimizing (or trying to) friction. A simple tile-based UI would be an ideal solution to support philosophy(6). It would allow the user to use a keyboard and mouse, a touch screen, a gamepad, or any other abstract input devices without any compromises. This could be further extended to allow navigating the entirety of the filesystem from this interface.\r\n\r\nIf well-executed, we could do away with desktop environments. Although they're highly preferred now on desktop PC's, I believe power-users will become accustomed to these low-friction systems.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}